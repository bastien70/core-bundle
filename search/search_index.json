{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction # The Leapt Core bundle is a bundle used to help with some repetitive tasks, including (but not limited to): Data lists with search File and image uploads Form types Navigation helper Paginator RSS feed generation SEO-related tasks (sitemaps, etc) Twig extensions Utilities Validators: PasswordStrength, Recaptcha, Slug If you find a bug or want to add a functionality, please create an issue or a pull request on Github ! Installation # This bundle requires PHP 7.4+. As the bundle is compatible with Symfony 4 and Symfony Flex, the only thing you have to do is requiring the package with composer: composer require leapt/core-bundle The bundle will automatically be registered in the bundles.php file. License # leapt/core-bundle is released under the MIT License. See the bundled LICENSE file for details. History # This bundle is a fork of the Snowcap Core bundle .","title":"Introduction"},{"location":"#introduction","text":"The Leapt Core bundle is a bundle used to help with some repetitive tasks, including (but not limited to): Data lists with search File and image uploads Form types Navigation helper Paginator RSS feed generation SEO-related tasks (sitemaps, etc) Twig extensions Utilities Validators: PasswordStrength, Recaptcha, Slug If you find a bug or want to add a functionality, please create an issue or a pull request on Github !","title":"Introduction"},{"location":"#installation","text":"This bundle requires PHP 7.4+. As the bundle is compatible with Symfony 4 and Symfony Flex, the only thing you have to do is requiring the package with composer: composer require leapt/core-bundle The bundle will automatically be registered in the bundles.php file.","title":"Installation"},{"location":"#license","text":"leapt/core-bundle is released under the MIT License. See the bundled LICENSE file for details.","title":"License"},{"location":"#history","text":"This bundle is a fork of the Snowcap Core bundle .","title":"History"},{"location":"configuration_reference/","text":"Configuration Reference # # config/packages/leapt_core.yaml leapt_core : upload_dir : '%kernel.project_dir%/public' paginator : template : '@LeaptCore/Paginator/paginator_default_layout.html.twig' recaptcha : public_key : 'your_public_key' private_key : 'your_private_key' enabled : true verify_host : false ajax : false api_host : www.google.com hide_badge : false score_threshold : 0.5","title":"Configuration Reference"},{"location":"configuration_reference/#configuration-reference","text":"# config/packages/leapt_core.yaml leapt_core : upload_dir : '%kernel.project_dir%/public' paginator : template : '@LeaptCore/Paginator/paginator_default_layout.html.twig' recaptcha : public_key : 'your_public_key' private_key : 'your_private_key' enabled : true verify_host : false ajax : false api_host : www.google.com hide_badge : false score_threshold : 0.5","title":"Configuration Reference"},{"location":"data_lists/","text":"Data lists # The Datalist component will help you create powerful data lists and lets you: Specify a data source (bundle provides datasource handlers for arrays and Doctrine ORM) Define all the fields (data) you want Create filters to narrow the search Paginate automatically (using the Paginator defined earlier) Create your first Data list # The following example creates a paginated list of News (10 per page), ordered by descending publication date. It will display a search filter, two fields (title and publicationDate), and a link to update the news. Example namespace App\\Controller ; use App\\Entity\\News ; use App\\Repository\\NewsRepository ; use Leapt\\CoreBundle\\Datalist\\Action\\Type\\SimpleActionType ; use Leapt\\CoreBundle\\Datalist\\DatalistFactory ; use Leapt\\CoreBundle\\Datalist\\Datasource\\DoctrineORMDatasource ; use Leapt\\CoreBundle\\Datalist\\Field\\Type\\DateTimeFieldType ; use Leapt\\CoreBundle\\Datalist\\Field\\Type\\TextFieldType ; use Leapt\\CoreBundle\\Datalist\\Filter\\Type\\SearchFilterType ; use Leapt\\CoreBundle\\Datalist\\Type\\DatalistType ; use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController ; use Symfony\\Component\\HttpFoundation\\Request ; use Symfony\\Component\\HttpFoundation\\Response ; final class NewsController extends AbstractController { public function __construct ( private DatalistFactory $datalistFactory , private NewsRepository $newsRepository , ) { } public function index ( Request $request ) : Response { $queryBuilder = $this -> newsRepository -> createQueryBuilder ( 'e' ) -> orderBy ( 'e.publicationDate' , 'DESC' ); $datalist = $this -> datalistFactory -> createBuilder ( DatalistType :: class , [ 'limit_per_page' => 10 , 'data_class' => News :: class , ]) -> addField ( 'title' , TextFieldType :: class , [ 'label' => 'news.title' , ]) -> addField ( 'publicationDate' , DateTimeFieldType :: class , [ 'label' => 'news.publication_date' , 'format' => 'Y/m/d' , ]) -> addFilter ( 'title' , SearchFilterType :: class , [ 'label' => 'news.title' , 'search_fields' => [ 'e.title' ], ]) -> addAction ( 'update' , SimpleActionType :: class , [ 'route' => 'app_news_update' , 'label' => 'content.index.update' , 'params' => [ 'id' => 'id' ], ]) -> getDatalist (); $datalist -> setRoute ( $request -> attributes -> get ( '_route' )) -> setRouteParams ( $request -> query -> all ()); $datasource = new DoctrineORMDatasource ( $queryBuilder ); $datalist -> setDatasource ( $datasource ); $datalist -> bind ( $request ); return $this -> render ( 'news/index.html.twig' , [ 'datalist' => $datalist , ]); } } Tip You can also lighten your controller by creating a custom Datalist class . Render the Data list # {% if datalist is empty %} No news available. {% else %} {{ datalist_widget ( datalist ) }} {% endif %} The data list is built using the @LeaptCore/Datalist/datalist_grid_layout.html.twig by default, but you can of course create your own. Here are the templates provided by the bundle: @LeaptCore/Datalist/datalist_grid_layout.html.twig (default) @LeaptCore/Datalist/datalist_tiled_layout.html.twig And like the Paginator component, you can override it using a Twig tag: {% datalist_theme datalist '@LeaptCore/Datalist/datalist_grid_layout.html.twig' %} Don't hesitate to create your own to adapt it to your layout/styles. Available Field types # Here are the Field Types provided by the bundle. Feel free to check the classes to know the available options. You can also create your own. BooleanFieldType DateTimeFieldType HeadingFieldType ImageFieldType LabelFieldType TextFieldType UrlFieldType Available Filter types # Here are the Filter Types provided by the bundle. Feel free to check the classes to know the available options. You can also create your own. ChoiceFieldType EntityFieldType SearchFieldType Available Action types # There is currently one Action Type provided by the bundle: SimpleActionType . Feel free to check the class to know the available options. You can also create your own.","title":"Data lists"},{"location":"data_lists/#data-lists","text":"The Datalist component will help you create powerful data lists and lets you: Specify a data source (bundle provides datasource handlers for arrays and Doctrine ORM) Define all the fields (data) you want Create filters to narrow the search Paginate automatically (using the Paginator defined earlier)","title":"Data lists"},{"location":"data_lists/#create-your-first-data-list","text":"The following example creates a paginated list of News (10 per page), ordered by descending publication date. It will display a search filter, two fields (title and publicationDate), and a link to update the news. Example namespace App\\Controller ; use App\\Entity\\News ; use App\\Repository\\NewsRepository ; use Leapt\\CoreBundle\\Datalist\\Action\\Type\\SimpleActionType ; use Leapt\\CoreBundle\\Datalist\\DatalistFactory ; use Leapt\\CoreBundle\\Datalist\\Datasource\\DoctrineORMDatasource ; use Leapt\\CoreBundle\\Datalist\\Field\\Type\\DateTimeFieldType ; use Leapt\\CoreBundle\\Datalist\\Field\\Type\\TextFieldType ; use Leapt\\CoreBundle\\Datalist\\Filter\\Type\\SearchFilterType ; use Leapt\\CoreBundle\\Datalist\\Type\\DatalistType ; use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController ; use Symfony\\Component\\HttpFoundation\\Request ; use Symfony\\Component\\HttpFoundation\\Response ; final class NewsController extends AbstractController { public function __construct ( private DatalistFactory $datalistFactory , private NewsRepository $newsRepository , ) { } public function index ( Request $request ) : Response { $queryBuilder = $this -> newsRepository -> createQueryBuilder ( 'e' ) -> orderBy ( 'e.publicationDate' , 'DESC' ); $datalist = $this -> datalistFactory -> createBuilder ( DatalistType :: class , [ 'limit_per_page' => 10 , 'data_class' => News :: class , ]) -> addField ( 'title' , TextFieldType :: class , [ 'label' => 'news.title' , ]) -> addField ( 'publicationDate' , DateTimeFieldType :: class , [ 'label' => 'news.publication_date' , 'format' => 'Y/m/d' , ]) -> addFilter ( 'title' , SearchFilterType :: class , [ 'label' => 'news.title' , 'search_fields' => [ 'e.title' ], ]) -> addAction ( 'update' , SimpleActionType :: class , [ 'route' => 'app_news_update' , 'label' => 'content.index.update' , 'params' => [ 'id' => 'id' ], ]) -> getDatalist (); $datalist -> setRoute ( $request -> attributes -> get ( '_route' )) -> setRouteParams ( $request -> query -> all ()); $datasource = new DoctrineORMDatasource ( $queryBuilder ); $datalist -> setDatasource ( $datasource ); $datalist -> bind ( $request ); return $this -> render ( 'news/index.html.twig' , [ 'datalist' => $datalist , ]); } } Tip You can also lighten your controller by creating a custom Datalist class .","title":"Create your first Data list"},{"location":"data_lists/#render-the-data-list","text":"{% if datalist is empty %} No news available. {% else %} {{ datalist_widget ( datalist ) }} {% endif %} The data list is built using the @LeaptCore/Datalist/datalist_grid_layout.html.twig by default, but you can of course create your own. Here are the templates provided by the bundle: @LeaptCore/Datalist/datalist_grid_layout.html.twig (default) @LeaptCore/Datalist/datalist_tiled_layout.html.twig And like the Paginator component, you can override it using a Twig tag: {% datalist_theme datalist '@LeaptCore/Datalist/datalist_grid_layout.html.twig' %} Don't hesitate to create your own to adapt it to your layout/styles.","title":"Render the Data list"},{"location":"data_lists/#available-field-types","text":"Here are the Field Types provided by the bundle. Feel free to check the classes to know the available options. You can also create your own. BooleanFieldType DateTimeFieldType HeadingFieldType ImageFieldType LabelFieldType TextFieldType UrlFieldType","title":"Available Field types"},{"location":"data_lists/#available-filter-types","text":"Here are the Filter Types provided by the bundle. Feel free to check the classes to know the available options. You can also create your own. ChoiceFieldType EntityFieldType SearchFieldType","title":"Available Filter types"},{"location":"data_lists/#available-action-types","text":"There is currently one Action Type provided by the bundle: SimpleActionType . Feel free to check the class to know the available options. You can also create your own.","title":"Available Action types"},{"location":"file_uploads/","text":"File Uploads # The File annotation/attribute is available to automatically handle file uploads for your entities. Usage Attributes use Leapt\\CoreBundle\\Doctrine\\Mapping as LeaptCore ; class News { #[ORM\\Column(type: 'string')] private ? string $name = null ; #[ORM\\Column(type: 'string')] private ? string $image = null ; #[LeaptCore\\File(path: 'uploads/news', mappedBy: 'image', nameCallback: 'name')] private ? UploadedFile $file = null ; } Annotations use Leapt\\CoreBundle\\Doctrine\\Mapping as LeaptCore ; class News { /** * @ORM\\Column(type=\"string\") */ private ? string $name = null ; /** * @ORM\\Column(type=\"string\") */ private ? string $image = null ; /** * @LeaptCore\\File(path=\"uploads/news\", mappedBy=\"image\", nameCallback=\"name\") */ private ? UploadedFile $file = null ; } Options Mandatory options: path or pathCallback mappedBy Name Description path Path where to store files. pathCallback Callback that returns the path where to store files. mappedBy Class property that will be used to store the file path. nameCallback Callback that returns a string that will be used to generate the filename.","title":"File Uploads"},{"location":"file_uploads/#file-uploads","text":"The File annotation/attribute is available to automatically handle file uploads for your entities. Usage Attributes use Leapt\\CoreBundle\\Doctrine\\Mapping as LeaptCore ; class News { #[ORM\\Column(type: 'string')] private ? string $name = null ; #[ORM\\Column(type: 'string')] private ? string $image = null ; #[LeaptCore\\File(path: 'uploads/news', mappedBy: 'image', nameCallback: 'name')] private ? UploadedFile $file = null ; } Annotations use Leapt\\CoreBundle\\Doctrine\\Mapping as LeaptCore ; class News { /** * @ORM\\Column(type=\"string\") */ private ? string $name = null ; /** * @ORM\\Column(type=\"string\") */ private ? string $image = null ; /** * @LeaptCore\\File(path=\"uploads/news\", mappedBy=\"image\", nameCallback=\"name\") */ private ? UploadedFile $file = null ; } Options Mandatory options: path or pathCallback mappedBy Name Description path Path where to store files. pathCallback Callback that returns the path where to store files. mappedBy Class property that will be used to store the file path. nameCallback Callback that returns a string that will be used to generate the filename.","title":"File Uploads"},{"location":"form_types/","text":"Form Types # File type # Usage Form use Leapt\\CoreBundle\\Form\\Type\\FileType ; public function buildForm ( FormBuilderInterface $builder , array $options ) : void { $builder -> add ( 'file' , FileType :: class , [ 'label' => 'press_radio_spot.field.file' , 'file_path' => 'path' , // Required, see Options 'allow_delete' => true , 'file_label' => 'file_type.label' , ]) ; } Model / Entity use Leapt\\CoreBundle\\Doctrine\\Mapping as LeaptCore ; class News { #[ORM\\Column(type: 'string')] private ? string $image = null ; #[LeaptCore\\File(path: 'uploads/news', mappedBy: 'image')] private ? UploadedFile $file = null ; } Options Name Description Default value file_path (required) Property of the object that stores the file path. Used to display a download link. delete_label Text to display next to the delete checkbox. Delete download_label Text to display in the download link. Download allow_delete Display a checkbox that allows to remove the current file. true See also File uploads . Image type # To be updated soon. See also File uploads . Recaptcha type # This form type is based on the EWZRecaptchaBundle , and allows you to generate a Recaptcha V2 in your form, and validate it. Usage use Leapt\\CoreBundle\\Form\\Type\\RecaptchaType ; use Leapt\\CoreBundle\\Validator\\Constraints as LeaptCore ; use Symfony\\Component\\Form\\AbstractType ; use Symfony\\Component\\Form\\FormBuilderInterface ; final class ContactType extends AbstractType { public function buildForm ( FormBuilderInterface $builder , array $options ) { $builder -> add ( 'recaptcha' , RecaptchaType :: class , [ 'label' => false , 'constraints' => new LeaptCore\\Recaptcha (), // You can also set the constraint in your model ]); } } Layout Use/extend the @LeaptCore/Form/form_core_layout.html.twig , or add it to your Twig's form_themes configuration, so the field is rendered properly. Configuration # config/packages/leapt_core.yaml leapt_core : recaptcha : public_key : 'your_public_key' private_key : 'your_private_key' enabled : true # true by default, but you can set it to false for your tests RecaptchaV3 type # This form type is based on the EWZRecaptchaBundle , and allows you to generate a Recaptcha V3 in your form, and validate it. It requires you to have the google/recaptcha package installed in your application. If it is not installed, a clear error message should be displayed in debug mode when validating. Usage use Leapt\\CoreBundle\\Form\\Type\\RecaptchaV3Type ; use Leapt\\CoreBundle\\Validator\\Constraints as LeaptCore ; use Symfony\\Component\\Form\\AbstractType ; use Symfony\\Component\\Form\\FormBuilderInterface ; final class ContactType extends AbstractType { public function buildForm ( FormBuilderInterface $builder , array $options ) { $builder -> add ( 'recaptcha' , RecaptchaV3Type :: class , [ 'label' => false , 'constraints' => new LeaptCore\\RecaptchaV3 (), // You can also set the constraint in your model ]); } } Layout Use/extend the @LeaptCore/Form/form_core_layout.html.twig , or add it to your Twig's form_themes configuration, so the field is rendered properly. Configuration # config/packages/leapt_core.yaml leapt_core : recaptcha : public_key : 'your_public_key' private_key : 'your_private_key' enabled : true # true by default, but you can set it to false for your tests hide_badge : true # false by default Sound type # To be updated soon. Video type # To be updated soon.","title":"Form Types"},{"location":"form_types/#form-types","text":"","title":"Form Types"},{"location":"form_types/#file-type","text":"Usage Form use Leapt\\CoreBundle\\Form\\Type\\FileType ; public function buildForm ( FormBuilderInterface $builder , array $options ) : void { $builder -> add ( 'file' , FileType :: class , [ 'label' => 'press_radio_spot.field.file' , 'file_path' => 'path' , // Required, see Options 'allow_delete' => true , 'file_label' => 'file_type.label' , ]) ; } Model / Entity use Leapt\\CoreBundle\\Doctrine\\Mapping as LeaptCore ; class News { #[ORM\\Column(type: 'string')] private ? string $image = null ; #[LeaptCore\\File(path: 'uploads/news', mappedBy: 'image')] private ? UploadedFile $file = null ; } Options Name Description Default value file_path (required) Property of the object that stores the file path. Used to display a download link. delete_label Text to display next to the delete checkbox. Delete download_label Text to display in the download link. Download allow_delete Display a checkbox that allows to remove the current file. true See also File uploads .","title":"File type"},{"location":"form_types/#image-type","text":"To be updated soon. See also File uploads .","title":"Image type"},{"location":"form_types/#recaptcha-type","text":"This form type is based on the EWZRecaptchaBundle , and allows you to generate a Recaptcha V2 in your form, and validate it. Usage use Leapt\\CoreBundle\\Form\\Type\\RecaptchaType ; use Leapt\\CoreBundle\\Validator\\Constraints as LeaptCore ; use Symfony\\Component\\Form\\AbstractType ; use Symfony\\Component\\Form\\FormBuilderInterface ; final class ContactType extends AbstractType { public function buildForm ( FormBuilderInterface $builder , array $options ) { $builder -> add ( 'recaptcha' , RecaptchaType :: class , [ 'label' => false , 'constraints' => new LeaptCore\\Recaptcha (), // You can also set the constraint in your model ]); } } Layout Use/extend the @LeaptCore/Form/form_core_layout.html.twig , or add it to your Twig's form_themes configuration, so the field is rendered properly. Configuration # config/packages/leapt_core.yaml leapt_core : recaptcha : public_key : 'your_public_key' private_key : 'your_private_key' enabled : true # true by default, but you can set it to false for your tests","title":"Recaptcha type"},{"location":"form_types/#recaptchav3-type","text":"This form type is based on the EWZRecaptchaBundle , and allows you to generate a Recaptcha V3 in your form, and validate it. It requires you to have the google/recaptcha package installed in your application. If it is not installed, a clear error message should be displayed in debug mode when validating. Usage use Leapt\\CoreBundle\\Form\\Type\\RecaptchaV3Type ; use Leapt\\CoreBundle\\Validator\\Constraints as LeaptCore ; use Symfony\\Component\\Form\\AbstractType ; use Symfony\\Component\\Form\\FormBuilderInterface ; final class ContactType extends AbstractType { public function buildForm ( FormBuilderInterface $builder , array $options ) { $builder -> add ( 'recaptcha' , RecaptchaV3Type :: class , [ 'label' => false , 'constraints' => new LeaptCore\\RecaptchaV3 (), // You can also set the constraint in your model ]); } } Layout Use/extend the @LeaptCore/Form/form_core_layout.html.twig , or add it to your Twig's form_themes configuration, so the field is rendered properly. Configuration # config/packages/leapt_core.yaml leapt_core : recaptcha : public_key : 'your_public_key' private_key : 'your_private_key' enabled : true # true by default, but you can set it to false for your tests hide_badge : true # false by default","title":"RecaptchaV3 type"},{"location":"form_types/#sound-type","text":"To be updated soon.","title":"Sound type"},{"location":"form_types/#video-type","text":"To be updated soon.","title":"Video type"},{"location":"navigation_helper/","text":"Navigation Helper # The Navigation helper is a set of tools to figure out which page you are on. Note that, if the documentation only covers the Twig Extension way (which covers the most common needs), you can also inject the Leapt\\CoreBundle\\Navigation\\NavigationRegistry service into your service/controller to perform the same. Active paths # Allows checking if the specified path is the current one. The Twig Extension provides 4 functions: set_active_paths : set an array of active paths get_active_paths : get the array of active paths add_active_path : add one active path (as a string) is_active_path : check if the provided path is the current one, returns a boolean. Note that this function will check if the specified path is either in the provided active paths, or the current request URI. Usage {% do add_active_path ( path ( 'app_news_index' )) %} <a href=\" {{ path ( 'app_news_index' ) }} \" class=\" {{ is_active_path ( path ( 'app_news_index' )) ? 'active' : '' }} \" > News list </a> Breadcrumbs # Easily build breadcrumbs. 3 functions are provided: append_breadcrumb : append one breadcrumb to the list, given a path and a label prepend_breadcrumb : same as append_breadcrumb , but simply prepends it instead of appending it get_breadcrumbs : get an array of previously set breadcrumbs Usage {% do append_breadcrumbs ( path ( 'app_news_index' ), 'News list' ) %} {% do prepend_breadcrumbs ( path ( 'app_default_index' ), 'ACME Website' ) %} {% for breadcrumb in get_breadcrumbs () %} {# Index 0 is the path, index 1 is the label #} <a href=\" {{ breadcrumb [ 0 ] }} \"> {{ breadcrumb [ 1 ] }} </a> {% endfor %}","title":"Navigation Helper"},{"location":"navigation_helper/#navigation-helper","text":"The Navigation helper is a set of tools to figure out which page you are on. Note that, if the documentation only covers the Twig Extension way (which covers the most common needs), you can also inject the Leapt\\CoreBundle\\Navigation\\NavigationRegistry service into your service/controller to perform the same.","title":"Navigation Helper"},{"location":"navigation_helper/#active-paths","text":"Allows checking if the specified path is the current one. The Twig Extension provides 4 functions: set_active_paths : set an array of active paths get_active_paths : get the array of active paths add_active_path : add one active path (as a string) is_active_path : check if the provided path is the current one, returns a boolean. Note that this function will check if the specified path is either in the provided active paths, or the current request URI. Usage {% do add_active_path ( path ( 'app_news_index' )) %} <a href=\" {{ path ( 'app_news_index' ) }} \" class=\" {{ is_active_path ( path ( 'app_news_index' )) ? 'active' : '' }} \" > News list </a>","title":"Active paths"},{"location":"navigation_helper/#breadcrumbs","text":"Easily build breadcrumbs. 3 functions are provided: append_breadcrumb : append one breadcrumb to the list, given a path and a label prepend_breadcrumb : same as append_breadcrumb , but simply prepends it instead of appending it get_breadcrumbs : get an array of previously set breadcrumbs Usage {% do append_breadcrumbs ( path ( 'app_news_index' ), 'News list' ) %} {% do prepend_breadcrumbs ( path ( 'app_default_index' ), 'ACME Website' ) %} {% for breadcrumb in get_breadcrumbs () %} {# Index 0 is the path, index 1 is the label #} <a href=\" {{ breadcrumb [ 0 ] }} \"> {{ breadcrumb [ 1 ] }} </a> {% endfor %}","title":"Breadcrumbs"},{"location":"paginator/","text":"Paginator # The Paginator will help you iterate and paginate items. It is provided in two versions: ArrayPaginator and DoctrineORMPaginator , available under the Leapt\\CoreBundle\\Paginator namespace. The docs will explain how to use the Doctrine ORM one, but it is easy to apply for the ArrayPaginator as well. Usage # use Leapt\\CoreBundle\\Paginator\\DoctrineORMPaginator ; // Get your QueryBuilder from some repository $queryBuilder = $this -> newsRepository -> getActiveQueryBuilder (); $currentPage = $request -> query -> get ( 'page' , 1 ); $paginator = new DoctrineORMPaginator ( $queryBuilder -> getQuery ()); $paginator -> setLimitPerPage ( 10 ) -> setRangeLimit ( 10 ) -> setPage ( $currentPage ); // Use it directly or pass it to Twig Template // Direct iteration is possible as it is Traversable foreach ( $paginator as $news ) { // ... } Twig usage # As you can do it using PHP, you can also iterate on the Paginator to use/render items. The paginator_widget function will render the pagination, if there are more than one page available. {% if paginator | length > 0 %} {% for news in paginator %} {{ include ( 'news/_item.html.twig' ) }} {% endfor %} {{ paginator_widget ( paginator ) }} {% else %} <p>There are no news available.</p> {% endif %} Twig Pagination # Three pagination templates are provided by the bundle (but you can of course create your own): @LeaptCore/Paginator/paginator_default_layout.html.twig (default) @LeaptCore/Paginator/paginator_bootstrap3_layout.html.twig @LeaptCore/Paginator/paginator_bootstrap4_layout.html.twig You can override the pagination template locally (like you would do for form themes): {% paginator_theme paginator '@LeaptCore/Paginator/paginator_bootstrap4_layout.html.twig' %} Or globally, in the configuration: # config/packages/leapt_core.yaml leapt_core : paginator : template : '@LeaptCore/Paginator/paginator_bootstrap4_layout.html.twig'","title":"Paginator"},{"location":"paginator/#paginator","text":"The Paginator will help you iterate and paginate items. It is provided in two versions: ArrayPaginator and DoctrineORMPaginator , available under the Leapt\\CoreBundle\\Paginator namespace. The docs will explain how to use the Doctrine ORM one, but it is easy to apply for the ArrayPaginator as well.","title":"Paginator"},{"location":"paginator/#usage","text":"use Leapt\\CoreBundle\\Paginator\\DoctrineORMPaginator ; // Get your QueryBuilder from some repository $queryBuilder = $this -> newsRepository -> getActiveQueryBuilder (); $currentPage = $request -> query -> get ( 'page' , 1 ); $paginator = new DoctrineORMPaginator ( $queryBuilder -> getQuery ()); $paginator -> setLimitPerPage ( 10 ) -> setRangeLimit ( 10 ) -> setPage ( $currentPage ); // Use it directly or pass it to Twig Template // Direct iteration is possible as it is Traversable foreach ( $paginator as $news ) { // ... }","title":"Usage"},{"location":"paginator/#twig-usage","text":"As you can do it using PHP, you can also iterate on the Paginator to use/render items. The paginator_widget function will render the pagination, if there are more than one page available. {% if paginator | length > 0 %} {% for news in paginator %} {{ include ( 'news/_item.html.twig' ) }} {% endfor %} {{ paginator_widget ( paginator ) }} {% else %} <p>There are no news available.</p> {% endif %}","title":"Twig usage"},{"location":"paginator/#twig-pagination","text":"Three pagination templates are provided by the bundle (but you can of course create your own): @LeaptCore/Paginator/paginator_default_layout.html.twig (default) @LeaptCore/Paginator/paginator_bootstrap3_layout.html.twig @LeaptCore/Paginator/paginator_bootstrap4_layout.html.twig You can override the pagination template locally (like you would do for form themes): {% paginator_theme paginator '@LeaptCore/Paginator/paginator_bootstrap4_layout.html.twig' %} Or globally, in the configuration: # config/packages/leapt_core.yaml leapt_core : paginator : template : '@LeaptCore/Paginator/paginator_bootstrap4_layout.html.twig'","title":"Twig Pagination"},{"location":"rss_feeds/","text":"RSS Feeds # The Feed Helper allows you to easily create RSS Feeds in minutes. Enable routing # Create/update the config/routes/leapt_core.yaml file, add the following: leapt_core_feed : resource : '@LeaptCoreBundle/Resources/config/routing_feed.yml' prefix : /feed Create the service # Then create a file that implements Leapt\\CoreBundle\\Feed\\FeedInterface : // src/Feed/ArticleFeed.php namespace App\\Feed ; use App\\Repository\\ArticleRepository ; use Leapt\\CoreBundle\\Feed\\FeedInterface ; use Leapt\\CoreBundle\\Feed\\FeedItem ; use Symfony\\Component\\Routing\\RouterInterface ; final class ArticleFeed implements FeedInterface { public function __construct ( private ArticleRepository $articleRepository , private RouterInterface $router , ) { } public function getId () : string { return $this -> router -> generate ( 'app_base_index' , [], RouterInterface :: ABSOLUTE_URL ); } public function getLink () : string { return $this -> router -> generate ( 'app_base_index' , [], RouterInterface :: ABSOLUTE_URL ); } public function getTitle () : string { return 'ACME website' ; } public function getDescription () : string { return 'ACME Description' ; } public function getUpdatedAt () : \\DateTime { $items = $this -> getItems (); return isset ( $items [ 0 ]) ? $items [ 0 ] -> getPublicationDate () : new \\DateTime (); } public function getItems () : iterable { return $this -> articleRepository -> findLatest ( 30 ); } public function buildItem ( $item ) : FeedItem { $uri = $this -> router -> generate ( 'app_article_view' , [ 'slug' => $item -> getSlug (), ], RouterInterface :: ABSOLUTE_URL ); $feedItem = new FeedItem (); $feedItem -> id = $uri ; $feedItem -> title = $item -> getName (); $feedItem -> description = $item -> getContent (); $feedItem -> createdAt = $item -> getPublicationDate (); $feedItem -> updatedAt = $item -> getLastUpdate (); $feedItem -> link = $uri ; $feedItem -> author = [ 'name' => $item -> getAuthor (), 'email' => 'acme@website.com' ]; return $feedItem ; } } Register the service # Finally all you need is to populate your services.yaml file with one or more Feed services like this: services : # Feeds App\\Feed\\ArticleFeed : tags : - { name : leapt_core.feed , alias : article } Now, your feed will be available at: http://yourhost/feed/article for RSS format http://yourhost/feed/article.atom for Atom format And using Twig: <link rel=\"alternate\" type=\"application/rss+xml\" href=\" {{ path ( 'leapt_core_feed' , { 'feedName' : 'news' , '_format' : 'rss' }) }} \"> <link rel=\"alternate\" type=\"application/atom+xml\" href=\" {{ path ( 'leapt_core_feed' , { 'feedName' : 'news' , '_format' : 'atom' }) }} \">","title":"RSS Feeds"},{"location":"rss_feeds/#rss-feeds","text":"The Feed Helper allows you to easily create RSS Feeds in minutes.","title":"RSS Feeds"},{"location":"rss_feeds/#enable-routing","text":"Create/update the config/routes/leapt_core.yaml file, add the following: leapt_core_feed : resource : '@LeaptCoreBundle/Resources/config/routing_feed.yml' prefix : /feed","title":"Enable routing"},{"location":"rss_feeds/#create-the-service","text":"Then create a file that implements Leapt\\CoreBundle\\Feed\\FeedInterface : // src/Feed/ArticleFeed.php namespace App\\Feed ; use App\\Repository\\ArticleRepository ; use Leapt\\CoreBundle\\Feed\\FeedInterface ; use Leapt\\CoreBundle\\Feed\\FeedItem ; use Symfony\\Component\\Routing\\RouterInterface ; final class ArticleFeed implements FeedInterface { public function __construct ( private ArticleRepository $articleRepository , private RouterInterface $router , ) { } public function getId () : string { return $this -> router -> generate ( 'app_base_index' , [], RouterInterface :: ABSOLUTE_URL ); } public function getLink () : string { return $this -> router -> generate ( 'app_base_index' , [], RouterInterface :: ABSOLUTE_URL ); } public function getTitle () : string { return 'ACME website' ; } public function getDescription () : string { return 'ACME Description' ; } public function getUpdatedAt () : \\DateTime { $items = $this -> getItems (); return isset ( $items [ 0 ]) ? $items [ 0 ] -> getPublicationDate () : new \\DateTime (); } public function getItems () : iterable { return $this -> articleRepository -> findLatest ( 30 ); } public function buildItem ( $item ) : FeedItem { $uri = $this -> router -> generate ( 'app_article_view' , [ 'slug' => $item -> getSlug (), ], RouterInterface :: ABSOLUTE_URL ); $feedItem = new FeedItem (); $feedItem -> id = $uri ; $feedItem -> title = $item -> getName (); $feedItem -> description = $item -> getContent (); $feedItem -> createdAt = $item -> getPublicationDate (); $feedItem -> updatedAt = $item -> getLastUpdate (); $feedItem -> link = $uri ; $feedItem -> author = [ 'name' => $item -> getAuthor (), 'email' => 'acme@website.com' ]; return $feedItem ; } }","title":"Create the service"},{"location":"rss_feeds/#register-the-service","text":"Finally all you need is to populate your services.yaml file with one or more Feed services like this: services : # Feeds App\\Feed\\ArticleFeed : tags : - { name : leapt_core.feed , alias : article } Now, your feed will be available at: http://yourhost/feed/article for RSS format http://yourhost/feed/article.atom for Atom format And using Twig: <link rel=\"alternate\" type=\"application/rss+xml\" href=\" {{ path ( 'leapt_core_feed' , { 'feedName' : 'news' , '_format' : 'rss' }) }} \"> <link rel=\"alternate\" type=\"application/atom+xml\" href=\" {{ path ( 'leapt_core_feed' , { 'feedName' : 'news' , '_format' : 'atom' }) }} \">","title":"Register the service"},{"location":"sitemaps/","text":"Sitemaps # Enable routing # Create/update the config/routes/leapt_core.yaml file, add the following: leapt_core_sitemap : resource : '@LeaptCoreBundle/Resources/config/routing_sitemap.yml' Create the service # Then create a file that extends Leapt\\CoreBundle\\Sitemap\\AbstractSitemap : // src/Sitemap/Sitemap.php namespace App\\Sitemap ; use App\\Entity\\Page ; use Doctrine\\ORM\\EntityManagerInterface ; use Leapt\\CoreBundle\\Sitemap\\AbstractSitemap ; use Symfony\\Component\\Routing\\Router ; final class Sitemap extends AbstractSitemap { public function __construct ( private EntityManagerInterface $em , private string $locale , ) { } public function build ( Router $router ) { // Homepage $this -> addUrl ( $router -> generate ( 'app_default_index' , [ '_locale' => $this -> locale ], true )); // Pages $pages = $this -> em -> getRepository ( Page :: class ) -> findAllPublished ( $this -> locale ); foreach ( $pages as $page ) { $pageSlug = $page -> getTranslations () -> get ( $this -> locale ) -> getSlug (); $loc = $router -> generate ( 'app_page_view' , [ 'slug' => $pageSlug , '_locale' => $this -> locale ], true ); $this -> addUrl ( $loc , null , self :: CHANGEFREQ_MONTHLY ); } } } Register the service # Finally all you need is to populate your services.yaml file with one or more Sitemap services like this: services : # Sitemaps app.sitemap.fr : class : App\\Sitemap\\Sitemap arguments : [ '@doctrine.orm.entity_manager' , 'fr' ] tags : - { name : leapt_core.sitemap , alias : fr } app.sitemap.en : class : App\\Sitemap\\Sitemap arguments : [ '@doctrine.orm.entity_manager' , 'en' ] tags : - { name : leapt_core.sitemap , alias : en } Now, your main sitemap is available at http://yourhost/sitemap.xml . If you defined several with aliases then the main sitemap will list all of them, and according the example you would get: sitemap.xml sitemap_fr.xml sitemap_en.xml","title":"Sitemaps"},{"location":"sitemaps/#sitemaps","text":"","title":"Sitemaps"},{"location":"sitemaps/#enable-routing","text":"Create/update the config/routes/leapt_core.yaml file, add the following: leapt_core_sitemap : resource : '@LeaptCoreBundle/Resources/config/routing_sitemap.yml'","title":"Enable routing"},{"location":"sitemaps/#create-the-service","text":"Then create a file that extends Leapt\\CoreBundle\\Sitemap\\AbstractSitemap : // src/Sitemap/Sitemap.php namespace App\\Sitemap ; use App\\Entity\\Page ; use Doctrine\\ORM\\EntityManagerInterface ; use Leapt\\CoreBundle\\Sitemap\\AbstractSitemap ; use Symfony\\Component\\Routing\\Router ; final class Sitemap extends AbstractSitemap { public function __construct ( private EntityManagerInterface $em , private string $locale , ) { } public function build ( Router $router ) { // Homepage $this -> addUrl ( $router -> generate ( 'app_default_index' , [ '_locale' => $this -> locale ], true )); // Pages $pages = $this -> em -> getRepository ( Page :: class ) -> findAllPublished ( $this -> locale ); foreach ( $pages as $page ) { $pageSlug = $page -> getTranslations () -> get ( $this -> locale ) -> getSlug (); $loc = $router -> generate ( 'app_page_view' , [ 'slug' => $pageSlug , '_locale' => $this -> locale ], true ); $this -> addUrl ( $loc , null , self :: CHANGEFREQ_MONTHLY ); } } }","title":"Create the service"},{"location":"sitemaps/#register-the-service","text":"Finally all you need is to populate your services.yaml file with one or more Sitemap services like this: services : # Sitemaps app.sitemap.fr : class : App\\Sitemap\\Sitemap arguments : [ '@doctrine.orm.entity_manager' , 'fr' ] tags : - { name : leapt_core.sitemap , alias : fr } app.sitemap.en : class : App\\Sitemap\\Sitemap arguments : [ '@doctrine.orm.entity_manager' , 'en' ] tags : - { name : leapt_core.sitemap , alias : en } Now, your main sitemap is available at http://yourhost/sitemap.xml . If you defined several with aliases then the main sitemap will list all of them, and according the example you would get: sitemap.xml sitemap_fr.xml sitemap_en.xml","title":"Register the service"},{"location":"twig_extensions/","text":"Twig Extensions # To be updated soon. DateExtension FacebookExtension GoogleExtension GravatarExtension SiteExtension TextExtension","title":"Twig Extensions"},{"location":"twig_extensions/#twig-extensions","text":"To be updated soon. DateExtension FacebookExtension GoogleExtension GravatarExtension SiteExtension TextExtension","title":"Twig Extensions"},{"location":"utilities/","text":"Utilities # PasswordStrengthChecker # This class has only one method: getStrength , and returns the strength of a given password (between 0 and 100, 100 being the best value). If the second argument - $username - is provided, the method will remove the username from the password if it contains it. See also the PasswordStrength constraint . Usage use Leapt\\CoreBundle\\Util\\PasswordStrengthChecker ; $passwordStrengthChecker = new PasswordStrengthChecker (); $score = $passwordStrengthChecker -> getStrength ( $password , $username ); StringUtil # The StringUtil has 4 public & static methods, their names speak for themselves: camelize underscore unaccent slugify Usage use Leapt\\CoreBundle\\Util\\StringUtil ; $name = 'Caf\u00e9 means coffee' ; $withoutAccents = StringUtil :: unaccent ( $name ); // Cafe means coffee $slug = StringUtil :: slugify ( $name ); // cafe-means-coffee","title":"Utilities"},{"location":"utilities/#utilities","text":"","title":"Utilities"},{"location":"utilities/#passwordstrengthchecker","text":"This class has only one method: getStrength , and returns the strength of a given password (between 0 and 100, 100 being the best value). If the second argument - $username - is provided, the method will remove the username from the password if it contains it. See also the PasswordStrength constraint . Usage use Leapt\\CoreBundle\\Util\\PasswordStrengthChecker ; $passwordStrengthChecker = new PasswordStrengthChecker (); $score = $passwordStrengthChecker -> getStrength ( $password , $username );","title":"PasswordStrengthChecker"},{"location":"utilities/#stringutil","text":"The StringUtil has 4 public & static methods, their names speak for themselves: camelize underscore unaccent slugify Usage use Leapt\\CoreBundle\\Util\\StringUtil ; $name = 'Caf\u00e9 means coffee' ; $withoutAccents = StringUtil :: unaccent ( $name ); // Cafe means coffee $slug = StringUtil :: slugify ( $name ); // cafe-means-coffee","title":"StringUtil"},{"location":"validators/","text":"Validator Constraints # Info All validators are available as PHP 8 attributes since version 3.1.1. PasswordStrength # The PasswordStrengthChecker is based on a snipped provided in Symfony 1. Usage Attributes use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; #[LeaptAssert\\PasswordStrength(min: 6, max: 72, score: 80')] public string $plainPassword ; Annotations use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; /** * @LeaptAssert\\PasswordStrength(min=6, max=72, score=80) */ public string $plainPassword ; Options Name Description Default value min Minimum length for the password. null max Maximum length for the password. null score Required strength to pass validation, between 0 and 100. 50 minMessage Message shown if the password is too short. This password is too short. It should have {{ limit }} characters or more. maxMessage Message shown if the password is too long. This password is too long. It should have {{ limit }} characters or less. scoreMessage Message shown if the password is not strong enough. This password is not strong enough. Recaptcha # This validator should be used with the Recaptcha Type , and is based on the EWZRecaptchaBundle . Usage Attributes use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; #[LeaptAssert\\Recaptcha(message: 'Invalid captcha.')] public $recaptcha ; Annotations use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; /** * @LeaptAssert\\Recaptcha(message=\"Invalid captcha.\") */ public $recaptcha ; Options Name Description Default value message Message shown if the captcha is not valid. This value is not a valid captcha. invalidHostMessage Message shown if the host is not valid. The captcha was not resolved on the right domain. See also RecaptchaType . RecaptchaV3 # This validator should be used with the RecaptchaV3 Type , and is based on the EWZRecaptchaBundle . It requires you to have the google/recaptcha package installed in your application. If it is not installed, a clear error message should be displayed in debug mode when validating. Usage Attributes use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; #[LeaptAssert\\RecaptchaV3(message: 'Invalid captcha.')] public $recaptcha ; Annotations use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; /** * @LeaptAssert\\RecaptchaV3(message=\"Invalid captcha.\") */ public $recaptcha ; Options Name Description Default value message Message shown if the captcha is not valid. The submitted captcha is invalid. invalidHostMessage Message shown if the host is not valid. The captcha was not resolved on the right domain. See also RecaptchaType . Slug # Helps to validate that the provided value matches a valid slug format. Usage Attributes use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; #[LeaptAssert\\Slug] public string $slug ; Annotations use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; /** * @LeaptAssert\\Slug() */ public string $slug ; Options Name Description Default value message Message shown if the slug is not valid. A slug can only contain lowercase letters, numbers and hyphens. pattern Pattern used to check the slug format. /^([a-z0-9-]+)$/","title":"Validator Constraints"},{"location":"validators/#validator-constraints","text":"Info All validators are available as PHP 8 attributes since version 3.1.1.","title":"Validator Constraints"},{"location":"validators/#passwordstrength","text":"The PasswordStrengthChecker is based on a snipped provided in Symfony 1. Usage Attributes use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; #[LeaptAssert\\PasswordStrength(min: 6, max: 72, score: 80')] public string $plainPassword ; Annotations use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; /** * @LeaptAssert\\PasswordStrength(min=6, max=72, score=80) */ public string $plainPassword ; Options Name Description Default value min Minimum length for the password. null max Maximum length for the password. null score Required strength to pass validation, between 0 and 100. 50 minMessage Message shown if the password is too short. This password is too short. It should have {{ limit }} characters or more. maxMessage Message shown if the password is too long. This password is too long. It should have {{ limit }} characters or less. scoreMessage Message shown if the password is not strong enough. This password is not strong enough.","title":"PasswordStrength"},{"location":"validators/#recaptcha","text":"This validator should be used with the Recaptcha Type , and is based on the EWZRecaptchaBundle . Usage Attributes use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; #[LeaptAssert\\Recaptcha(message: 'Invalid captcha.')] public $recaptcha ; Annotations use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; /** * @LeaptAssert\\Recaptcha(message=\"Invalid captcha.\") */ public $recaptcha ; Options Name Description Default value message Message shown if the captcha is not valid. This value is not a valid captcha. invalidHostMessage Message shown if the host is not valid. The captcha was not resolved on the right domain. See also RecaptchaType .","title":"Recaptcha"},{"location":"validators/#recaptchav3","text":"This validator should be used with the RecaptchaV3 Type , and is based on the EWZRecaptchaBundle . It requires you to have the google/recaptcha package installed in your application. If it is not installed, a clear error message should be displayed in debug mode when validating. Usage Attributes use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; #[LeaptAssert\\RecaptchaV3(message: 'Invalid captcha.')] public $recaptcha ; Annotations use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; /** * @LeaptAssert\\RecaptchaV3(message=\"Invalid captcha.\") */ public $recaptcha ; Options Name Description Default value message Message shown if the captcha is not valid. The submitted captcha is invalid. invalidHostMessage Message shown if the host is not valid. The captcha was not resolved on the right domain. See also RecaptchaType .","title":"RecaptchaV3"},{"location":"validators/#slug","text":"Helps to validate that the provided value matches a valid slug format. Usage Attributes use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; #[LeaptAssert\\Slug] public string $slug ; Annotations use Leapt\\CoreBundle\\Validator\\Constraints as LeaptAssert ; /** * @LeaptAssert\\Slug() */ public string $slug ; Options Name Description Default value message Message shown if the slug is not valid. A slug can only contain lowercase letters, numbers and hyphens. pattern Pattern used to check the slug format. /^([a-z0-9-]+)$/","title":"Slug"},{"location":"data_lists/custom_data_list/","text":"Data list - Create a custom Datalist class # namespace App\\Controller ; use App\\Datalist\\Type\\NewsDatalistType ; use App\\Repository\\NewsRepository ; use Leapt\\CoreBundle\\Datalist\\DatalistFactory ; use Leapt\\CoreBundle\\Datalist\\Datasource\\DoctrineORMDatasource ; use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController ; use Symfony\\Component\\HttpFoundation\\Request ; use Symfony\\Component\\HttpFoundation\\Response ; final class NewsController extends AbstractController { public function __construct ( private DatalistFactory $datalistFactory , private NewsRepository $newsRepository , ) { } public function index ( Request $request ) : Response { $queryBuilder = $this -> newsRepository -> createQueryBuilder ( 'e' ) -> orderBy ( 'e.publicationDate' , 'DESC' ); $datalist = $this -> datalistFactory -> createBuilder ( NewsDatalistType :: class ) -> getDatalist (); $datalist -> setRoute ( $request -> attributes -> get ( '_route' )) -> setRouteParams ( $request -> query -> all ()); $datasource = new DoctrineORMDatasource ( $queryBuilder ); $datalist -> setDatasource ( $datasource ); $datalist -> bind ( $request ); return $this -> render ( 'news/index.html.twig' , [ 'datalist' => $datalist , ]); } } namespace App\\Datalist\\Type ; use App\\Entity\\News ; use Leapt\\CoreBundle\\Datalist\\Action\\Type\\SimpleActionType ; use Leapt\\CoreBundle\\Datalist\\DatalistBuilder ; use Leapt\\CoreBundle\\Datalist\\Field\\Type\\DateTimeFieldType ; use Leapt\\CoreBundle\\Datalist\\Field\\Type\\TextFieldType ; use Leapt\\CoreBundle\\Datalist\\Filter\\Type\\SearchFilterType ; use Leapt\\CoreBundle\\Datalist\\Type\\DatalistType ; final class NewsDatalistType extends DatalistType { public function configureOptions ( OptionsResolver $resolver ) { parent :: configureOptions ( $resolver ); $resolver -> setDefaults ([ 'limit_per_page' => 10 , 'data_class' => News :: class , ]) ; } public function buildDatalist ( DatalistBuilder $builder , array $options ) { $builder -> addField ( 'title' , TextFieldType :: class , [ 'label' => 'news.title' , ]) -> addField ( 'publicationDate' , DateTimeFieldType :: class , [ 'label' => 'news.publication_date' , 'format' => 'Y/m/d' , ]) -> addFilter ( 'title' , SearchFilterType :: class , [ 'label' => 'news.title' , 'search_fields' => [ 'e.title' ], ]) -> addAction ( 'update' , SimpleActionType :: class , [ 'route' => 'app_news_update' , 'label' => 'content.index.update' , 'params' => [ 'id' => 'id' ], ]) ; } } Go back to Data lists documentation","title":"Data list - Create a custom Datalist class"},{"location":"data_lists/custom_data_list/#data-list-create-a-custom-datalist-class","text":"namespace App\\Controller ; use App\\Datalist\\Type\\NewsDatalistType ; use App\\Repository\\NewsRepository ; use Leapt\\CoreBundle\\Datalist\\DatalistFactory ; use Leapt\\CoreBundle\\Datalist\\Datasource\\DoctrineORMDatasource ; use Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController ; use Symfony\\Component\\HttpFoundation\\Request ; use Symfony\\Component\\HttpFoundation\\Response ; final class NewsController extends AbstractController { public function __construct ( private DatalistFactory $datalistFactory , private NewsRepository $newsRepository , ) { } public function index ( Request $request ) : Response { $queryBuilder = $this -> newsRepository -> createQueryBuilder ( 'e' ) -> orderBy ( 'e.publicationDate' , 'DESC' ); $datalist = $this -> datalistFactory -> createBuilder ( NewsDatalistType :: class ) -> getDatalist (); $datalist -> setRoute ( $request -> attributes -> get ( '_route' )) -> setRouteParams ( $request -> query -> all ()); $datasource = new DoctrineORMDatasource ( $queryBuilder ); $datalist -> setDatasource ( $datasource ); $datalist -> bind ( $request ); return $this -> render ( 'news/index.html.twig' , [ 'datalist' => $datalist , ]); } } namespace App\\Datalist\\Type ; use App\\Entity\\News ; use Leapt\\CoreBundle\\Datalist\\Action\\Type\\SimpleActionType ; use Leapt\\CoreBundle\\Datalist\\DatalistBuilder ; use Leapt\\CoreBundle\\Datalist\\Field\\Type\\DateTimeFieldType ; use Leapt\\CoreBundle\\Datalist\\Field\\Type\\TextFieldType ; use Leapt\\CoreBundle\\Datalist\\Filter\\Type\\SearchFilterType ; use Leapt\\CoreBundle\\Datalist\\Type\\DatalistType ; final class NewsDatalistType extends DatalistType { public function configureOptions ( OptionsResolver $resolver ) { parent :: configureOptions ( $resolver ); $resolver -> setDefaults ([ 'limit_per_page' => 10 , 'data_class' => News :: class , ]) ; } public function buildDatalist ( DatalistBuilder $builder , array $options ) { $builder -> addField ( 'title' , TextFieldType :: class , [ 'label' => 'news.title' , ]) -> addField ( 'publicationDate' , DateTimeFieldType :: class , [ 'label' => 'news.publication_date' , 'format' => 'Y/m/d' , ]) -> addFilter ( 'title' , SearchFilterType :: class , [ 'label' => 'news.title' , 'search_fields' => [ 'e.title' ], ]) -> addAction ( 'update' , SimpleActionType :: class , [ 'route' => 'app_news_update' , 'label' => 'content.index.update' , 'params' => [ 'id' => 'id' ], ]) ; } } Go back to Data lists documentation","title":"Data list - Create a custom Datalist class"}]}